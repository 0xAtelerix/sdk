// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: atelerix.proto

package emitterproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Emitter_GetCheckpoints_FullMethodName                  = "/atelerix.Emitter/GetCheckpoints"
	Emitter_CreateInternalTransactionsBatch_FullMethodName = "/atelerix.Emitter/CreateInternalTransactionsBatch"
	Emitter_GetExternalTransactions_FullMethodName         = "/atelerix.Emitter/GetExternalTransactions"
	Emitter_GetChainID_FullMethodName                      = "/atelerix.Emitter/GetChainID"
)

// EmitterClient is the client API for Emitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Event Emission
type EmitterClient interface {
	// Retrieves a list of finalized checkpoints from a given block number
	GetCheckpoints(ctx context.Context, in *GetCheckpointsRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	// Stores new pending transactions into HotDB and returns a batch hash
	CreateInternalTransactionsBatch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateInternalTransactionsBatchResponse, error)
	// Retrieves external transactions from a given block number
	GetExternalTransactions(ctx context.Context, in *GetExternalTransactionsRequest, opts ...grpc.CallOption) (*GetExternalTransactionsResponse, error)
	GetChainID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChainIDResponse, error)
}

type emitterClient struct {
	cc grpc.ClientConnInterface
}

func NewEmitterClient(cc grpc.ClientConnInterface) EmitterClient {
	return &emitterClient{cc}
}

func (c *emitterClient) GetCheckpoints(ctx context.Context, in *GetCheckpointsRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, Emitter_GetCheckpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterClient) CreateInternalTransactionsBatch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateInternalTransactionsBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInternalTransactionsBatchResponse)
	err := c.cc.Invoke(ctx, Emitter_CreateInternalTransactionsBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterClient) GetExternalTransactions(ctx context.Context, in *GetExternalTransactionsRequest, opts ...grpc.CallOption) (*GetExternalTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExternalTransactionsResponse)
	err := c.cc.Invoke(ctx, Emitter_GetExternalTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterClient) GetChainID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChainIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChainIDResponse)
	err := c.cc.Invoke(ctx, Emitter_GetChainID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmitterServer is the server API for Emitter service.
// All implementations must embed UnimplementedEmitterServer
// for forward compatibility.
//
// gRPC Service for Event Emission
type EmitterServer interface {
	// Retrieves a list of finalized checkpoints from a given block number
	GetCheckpoints(context.Context, *GetCheckpointsRequest) (*CheckpointResponse, error)
	// Stores new pending transactions into HotDB and returns a batch hash
	CreateInternalTransactionsBatch(context.Context, *emptypb.Empty) (*CreateInternalTransactionsBatchResponse, error)
	// Retrieves external transactions from a given block number
	GetExternalTransactions(context.Context, *GetExternalTransactionsRequest) (*GetExternalTransactionsResponse, error)
	GetChainID(context.Context, *emptypb.Empty) (*GetChainIDResponse, error)
	mustEmbedUnimplementedEmitterServer()
}

// UnimplementedEmitterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmitterServer struct{}

func (UnimplementedEmitterServer) GetCheckpoints(context.Context, *GetCheckpointsRequest) (*CheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoints not implemented")
}
func (UnimplementedEmitterServer) CreateInternalTransactionsBatch(context.Context, *emptypb.Empty) (*CreateInternalTransactionsBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalTransactionsBatch not implemented")
}
func (UnimplementedEmitterServer) GetExternalTransactions(context.Context, *GetExternalTransactionsRequest) (*GetExternalTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalTransactions not implemented")
}
func (UnimplementedEmitterServer) GetChainID(context.Context, *emptypb.Empty) (*GetChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainID not implemented")
}
func (UnimplementedEmitterServer) mustEmbedUnimplementedEmitterServer() {}
func (UnimplementedEmitterServer) testEmbeddedByValue()                 {}

// UnsafeEmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmitterServer will
// result in compilation errors.
type UnsafeEmitterServer interface {
	mustEmbedUnimplementedEmitterServer()
}

func RegisterEmitterServer(s grpc.ServiceRegistrar, srv EmitterServer) {
	// If the following call pancis, it indicates UnimplementedEmitterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Emitter_ServiceDesc, srv)
}

func _Emitter_GetCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServer).GetCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emitter_GetCheckpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServer).GetCheckpoints(ctx, req.(*GetCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitter_CreateInternalTransactionsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServer).CreateInternalTransactionsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emitter_CreateInternalTransactionsBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServer).CreateInternalTransactionsBatch(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitter_GetExternalTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServer).GetExternalTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emitter_GetExternalTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServer).GetExternalTransactions(ctx, req.(*GetExternalTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitter_GetChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServer).GetChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emitter_GetChainID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServer).GetChainID(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Emitter_ServiceDesc is the grpc.ServiceDesc for Emitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atelerix.Emitter",
	HandlerType: (*EmitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckpoints",
			Handler:    _Emitter_GetCheckpoints_Handler,
		},
		{
			MethodName: "CreateInternalTransactionsBatch",
			Handler:    _Emitter_CreateInternalTransactionsBatch_Handler,
		},
		{
			MethodName: "GetExternalTransactions",
			Handler:    _Emitter_GetExternalTransactions_Handler,
		},
		{
			MethodName: "GetChainID",
			Handler:    _Emitter_GetChainID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atelerix.proto",
}

const (
	Health_Check_FullMethodName = "/atelerix.Health/Check"
	Health_Watch_FullMethodName = "/atelerix.Health/Watch"
)

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Health Check Service
type HealthClient interface {
	Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthCheckResponse], error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Health_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Watch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthCheckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[0], Health_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, HealthCheckResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Health_WatchClient = grpc.ServerStreamingClient[HealthCheckResponse]

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility.
//
// gRPC Health Check Service
type HealthServer interface {
	Check(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	Watch(*emptypb.Empty, grpc.ServerStreamingServer[HealthCheckResponse]) error
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServer struct{}

func (UnimplementedHealthServer) Check(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServer) Watch(*emptypb.Empty, grpc.ServerStreamingServer[HealthCheckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}
func (UnimplementedHealthServer) testEmbeddedByValue()                {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	// If the following call pancis, it indicates UnimplementedHealthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Health_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServer).Watch(m, &grpc.GenericServerStream[emptypb.Empty, HealthCheckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Health_WatchServer = grpc.ServerStreamingServer[HealthCheckResponse]

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atelerix.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Health_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "atelerix.proto",
}
