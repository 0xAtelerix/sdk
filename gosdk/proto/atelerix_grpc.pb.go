// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: atelerix.proto

package emitterproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Emitter_GetCheckpoints_FullMethodName                  = "/atelerix.Emitter/GetCheckpoints"
	Emitter_CreateInternalTransactionsBatch_FullMethodName = "/atelerix.Emitter/CreateInternalTransactionsBatch"
	Emitter_GetExternalTransactions_FullMethodName         = "/atelerix.Emitter/GetExternalTransactions"
	Emitter_GetChainId_FullMethodName                      = "/atelerix.Emitter/GetChainId"
)

// EmitterClient is the client API for Emitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmitterClient interface {
	// Retrieves a list of finalized checkpoints from a given block number
	GetCheckpoints(ctx context.Context, in *GetCheckpointsRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	// Stores new pending transactions into HotDB and returns a batch hash
	CreateInternalTransactionsBatch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateInternalTransactionsBatchResponse, error)
	// Retrieves external transactions from a given block number
	GetExternalTransactions(ctx context.Context, in *GetExternalTransactionsRequest, opts ...grpc.CallOption) (*GetExternalTransactionsResponse, error)
	GetChainId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChainIDResponse, error)
}

type emitterClient struct {
	cc grpc.ClientConnInterface
}

func NewEmitterClient(cc grpc.ClientConnInterface) EmitterClient {
	return &emitterClient{cc}
}

func (c *emitterClient) GetCheckpoints(ctx context.Context, in *GetCheckpointsRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, Emitter_GetCheckpoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterClient) CreateInternalTransactionsBatch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateInternalTransactionsBatchResponse, error) {
	out := new(CreateInternalTransactionsBatchResponse)
	err := c.cc.Invoke(ctx, Emitter_CreateInternalTransactionsBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterClient) GetExternalTransactions(ctx context.Context, in *GetExternalTransactionsRequest, opts ...grpc.CallOption) (*GetExternalTransactionsResponse, error) {
	out := new(GetExternalTransactionsResponse)
	err := c.cc.Invoke(ctx, Emitter_GetExternalTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterClient) GetChainId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChainIDResponse, error) {
	out := new(GetChainIDResponse)
	err := c.cc.Invoke(ctx, Emitter_GetChainId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmitterServer is the server API for Emitter service.
// All implementations must embed UnimplementedEmitterServer
// for forward compatibility
type EmitterServer interface {
	// Retrieves a list of finalized checkpoints from a given block number
	GetCheckpoints(context.Context, *GetCheckpointsRequest) (*CheckpointResponse, error)
	// Stores new pending transactions into HotDB and returns a batch hash
	CreateInternalTransactionsBatch(context.Context, *emptypb.Empty) (*CreateInternalTransactionsBatchResponse, error)
	// Retrieves external transactions from a given block number
	GetExternalTransactions(context.Context, *GetExternalTransactionsRequest) (*GetExternalTransactionsResponse, error)
	GetChainId(context.Context, *emptypb.Empty) (*GetChainIDResponse, error)
	mustEmbedUnimplementedEmitterServer()
}

// UnimplementedEmitterServer must be embedded to have forward compatible implementations.
type UnimplementedEmitterServer struct {
}

func (UnimplementedEmitterServer) GetCheckpoints(context.Context, *GetCheckpointsRequest) (*CheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoints not implemented")
}
func (UnimplementedEmitterServer) CreateInternalTransactionsBatch(context.Context, *emptypb.Empty) (*CreateInternalTransactionsBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalTransactionsBatch not implemented")
}
func (UnimplementedEmitterServer) GetExternalTransactions(context.Context, *GetExternalTransactionsRequest) (*GetExternalTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalTransactions not implemented")
}
func (UnimplementedEmitterServer) GetChainId(context.Context, *emptypb.Empty) (*GetChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainId not implemented")
}
func (UnimplementedEmitterServer) mustEmbedUnimplementedEmitterServer() {}

// UnsafeEmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmitterServer will
// result in compilation errors.
type UnsafeEmitterServer interface {
	mustEmbedUnimplementedEmitterServer()
}

func RegisterEmitterServer(s grpc.ServiceRegistrar, srv EmitterServer) {
	s.RegisterService(&Emitter_ServiceDesc, srv)
}

func _Emitter_GetCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServer).GetCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emitter_GetCheckpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServer).GetCheckpoints(ctx, req.(*GetCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitter_CreateInternalTransactionsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServer).CreateInternalTransactionsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emitter_CreateInternalTransactionsBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServer).CreateInternalTransactionsBatch(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitter_GetExternalTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServer).GetExternalTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emitter_GetExternalTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServer).GetExternalTransactions(ctx, req.(*GetExternalTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emitter_GetChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServer).GetChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emitter_GetChainId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServer).GetChainId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Emitter_ServiceDesc is the grpc.ServiceDesc for Emitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atelerix.Emitter",
	HandlerType: (*EmitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckpoints",
			Handler:    _Emitter_GetCheckpoints_Handler,
		},
		{
			MethodName: "CreateInternalTransactionsBatch",
			Handler:    _Emitter_CreateInternalTransactionsBatch_Handler,
		},
		{
			MethodName: "GetExternalTransactions",
			Handler:    _Emitter_GetExternalTransactions_Handler,
		},
		{
			MethodName: "GetChainId",
			Handler:    _Emitter_GetChainId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atelerix.proto",
}

const (
	Health_Check_FullMethodName = "/atelerix.Health/Check"
	Health_Watch_FullMethodName = "/atelerix.Health/Watch"
)

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Health_WatchClient, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Health_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Watch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Health_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[0], Health_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &healthWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Health_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthWatchClient struct {
	grpc.ClientStream
}

func (x *healthWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	Check(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	Watch(*emptypb.Empty, Health_WatchServer) error
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) Check(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServer) Watch(*emptypb.Empty, Health_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Health_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServer).Watch(m, &healthWatchServer{stream})
}

type Health_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type healthWatchServer struct {
	grpc.ServerStream
}

func (x *healthWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atelerix.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Health_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "atelerix.proto",
}
